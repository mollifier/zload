# zload - zsh plugin to load functions as an autoloading function.
#
# Copyright (c) 2014 Hideaki Miyake
# Licensed under the MIT License (MIT)
#
# Author : Hideaki Miyake (https://github.com/mollifier)
# URL : https://github.com/mollifier/zload
#
# How to set up
#   Put zload and _zload files somewhere in your $fpath
#   and add this line to your .zshrc:
#
#     autoload -Uz zload
#
# Usage: zload [-a|-d] FILE...
#

emulate -L zsh

typeset -r SCRIPT_NAME="zload"

# global variables
if (( ! ${+_zload_loaded_function_path_list} )) ; then
  _zload_loaded_function_path_list=()
fi

function _zload_print_usage()
{
    cat << EOF
Usage: $SCRIPT_NAME [-a|-d] FILE...
Load files as an autoloading function.
$SCRIPT_NAME can load autoloading functions or zsh completion functions.
When -a option is specified, from then on come to reload functions automatically.

  -a                 enable auto reload
  -d                 disable auto reload
  -h                 display this help and exit

Examples:
  $SCRIPT_NAME myfunc _myfunc    Load myfunc and _myfunc.
  $SCRIPT_NAME -a myfunc         Load myfunc and enable auto reload
  $SCRIPT_NAME -a                Enable auto reload.
  $SCRIPT_NAME -d                Disable auto reload.
EOF
}

function _zload_print_error()
{
    echo "$SCRIPT_NAME: $@" 1>&2
    echo "Try \`-h' option for more information." 1>&2
}

# load specified files as an autoloading function
function _zload_load_files()
{
  local file function_path function_name
  for file in "$@"; do
    if [[ -z "$file" ]]; then
      continue
    fi

    if [[ -d "${file:A}" ]]; then
      echo "$SCRIPT_NAME: $file: Is a directory" 1>&2
      continue
    fi
    if [[ ! -f "${file:A}" ]]; then
      echo "$SCRIPT_NAME: $file: No such file" 1>&2
      continue
    fi

    function_path="${file:h}"
    function_name="${file:t}"

    if (( $+functions[$function_name] )) ; then
      # "function_name" is defined
      unfunction -- "$function_name"
    fi
    FPATH="$function_path" autoload -Uz +X -- "$function_name"

    if [[ "$function_name" == _* ]]; then
      # "function_name" is a completion script

      # fpath requires absolute path
      # convert relative path to absolute path with :a modifier
      fpath=("${function_path:a}" $fpath) compinit
    fi

    # store file fullpath even if zload auto reloading is disabled
    local file_fullpath="${file:a}"
    if (( ${_zload_loaded_function_path_list[(I)$file_fullpath]} == 0 )); then
      # $file_fullpath isn't stored yet
      _zload_loaded_function_path_list=($_zload_loaded_function_path_list "$file_fullpath")
    fi

  done
}

# reload autoloading functions which are already defined
function _zload_reload_files()
{
  local file function_path function_name
  for file in "$@"; do
    local file_found=1 # file found
    if [[ -z "$file" ]]; then
      file_found=0
    fi

    if [[ -d "${file:A}" ]]; then
      file_found=0
    fi
    if [[ ! -f "${file:A}" ]]; then
      file_found=0
    fi

    function_path="${file:h}"
    function_name="${file:t}"

    if (( $+functions[$function_name] )) ; then
      # "function_name" is defined
      unfunction -- "$function_name"

      if [[ "$file_found" == "1" ]]; then
        FPATH="$function_path" autoload -Uz +X -- "$function_name"
      fi
    fi
  done
}

function _zload_auto_reload_hook()
{
  # reload functions automatically
  if (( ${#_zload_loaded_function_path_list} )); then
    _zload_reload_files $_zload_loaded_function_path_list
  fi
}

function _zload_enable_auto_load()
{
  # add _zload_auto_reload_hook to precmd_functions array
  if (( ! ${+precmd_functions} )); then
    precmd_functions=()
  fi

  if (( ${precmd_functions[(I)_zload_auto_reload_hook]} == 0 )); then
    # array dosen't contain _zload_auto_reload_hook function
    precmd_functions=($precmd_functions _zload_auto_reload_hook)
  fi
}

function _zload_disable_auto_load()
{
  # remove _zload_auto_reload_hook from precmd_functions array
  if (( ${+precmd_functions} )); then
    precmd_functions=(${precmd_functions:#_zload_auto_reload_hook})
  fi

  # unset precmd_functions if it is empty
  if (( ! ${#precmd_functions} )); then
    unset precmd_functions
  fi
}

# main function
function _zload_main()
{
  # 'enable' or 'disable'
  local autoreload_mode=""

  local option OPTARG OPTIND
  while getopts ':adh' option; do
    case $option in
      a)
        autoreload_mode="enable"
        ;;
      d)
        autoreload_mode="disable"
        ;;
      h)
        _zload_print_usage
        return 0
        ;;
      :)
        _zload_print_error "option requires an argument -- $OPTARG"
        return 1
        ;;
      *)
        _zload_print_error "invalid option -- $OPTARG"
        return 1
        ;;
    esac
  done
  shift $(expr $OPTIND - 1)

  if [[ "$autoreload_mode" == "enable" ]]; then
    _zload_enable_auto_load
  elif [[ "$autoreload_mode" == "disable" ]]; then
    _zload_disable_auto_load
  fi

  if [[ "${#}" -le 0 ]]; then
    if [[ -n "$autoreload_mode" ]]; then
      return 0
    else
      _zload_print_error 'you must specify filename'
      return 1
    fi
  fi

  _zload_load_files "$@"
}

_zload_main "$@"

# Local Variables:
# mode: Shell-Script
# sh-indentation: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# End:
# vim: ft=zsh sw=2 ts=2 et

